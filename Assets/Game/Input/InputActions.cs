//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""InGameScene"",
            ""id"": ""fba4753b-d6b9-4c64-be9f-9825d683409c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3e96f100-87b5-461e-a668-bd0d7ede9fec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""560ef309-5914-40d4-9307-ed188d44ddd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""ccabd373-b53d-4fc7-92ba-a40bb9f261c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""7964dd7a-6dd8-4bde-a68f-203a8113c21a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""55da91e9-add6-491d-b659-8b27462281c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""b87b2181-9b48-4bcd-880f-39b45d12dbda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GameEnd"",
                    ""type"": ""Button"",
                    ""id"": ""7f2ceb18-d489-4c81-9c06-9b56ab6f9638"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a52171d0-8ee5-47a6-8767-fe9785f75ae1"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""108e6209-7c0b-4254-93fc-8925ec0d6451"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d757c0ae-8321-4fb7-aae9-476faf4d386a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b7e4627-504c-4a5e-af3f-84daceed316e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97dc7d1d-0146-449d-9bf9-0c88fce2304c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c130020-4a70-466f-82e3-f0c2dc4509b0"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""551db28d-fa2a-4f36-8cb9-00c59820555e"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OutGameScene"",
            ""id"": ""2726e2c1-b872-4688-81e8-46b5a5f4fe66"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""416913b3-c9b1-4908-8527-43f9fae19249"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""b5e3f987-5ff1-452c-943c-286d384ad3be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GameEnd"",
                    ""type"": ""Button"",
                    ""id"": ""a1ea779e-a37d-4d77-a6ba-7ea59b9237d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""640ef8d4-39a3-4089-9488-2e7819993e71"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91f27a7f-0899-4001-9c6f-b0aff36c65b5"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb25e1bc-954e-446a-ab7c-3ed7aaaa9d05"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGameScene
        m_InGameScene = asset.FindActionMap("InGameScene", throwIfNotFound: true);
        m_InGameScene_Move = m_InGameScene.FindAction("Move", throwIfNotFound: true);
        m_InGameScene_A = m_InGameScene.FindAction("A", throwIfNotFound: true);
        m_InGameScene_B = m_InGameScene.FindAction("B", throwIfNotFound: true);
        m_InGameScene_X = m_InGameScene.FindAction("X", throwIfNotFound: true);
        m_InGameScene_Y = m_InGameScene.FindAction("Y", throwIfNotFound: true);
        m_InGameScene_Pause = m_InGameScene.FindAction("Pause", throwIfNotFound: true);
        m_InGameScene_GameEnd = m_InGameScene.FindAction("GameEnd", throwIfNotFound: true);
        // OutGameScene
        m_OutGameScene = asset.FindActionMap("OutGameScene", throwIfNotFound: true);
        m_OutGameScene_A = m_OutGameScene.FindAction("A", throwIfNotFound: true);
        m_OutGameScene_B = m_OutGameScene.FindAction("B", throwIfNotFound: true);
        m_OutGameScene_GameEnd = m_OutGameScene.FindAction("GameEnd", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGameScene
    private readonly InputActionMap m_InGameScene;
    private List<IInGameSceneActions> m_InGameSceneActionsCallbackInterfaces = new List<IInGameSceneActions>();
    private readonly InputAction m_InGameScene_Move;
    private readonly InputAction m_InGameScene_A;
    private readonly InputAction m_InGameScene_B;
    private readonly InputAction m_InGameScene_X;
    private readonly InputAction m_InGameScene_Y;
    private readonly InputAction m_InGameScene_Pause;
    private readonly InputAction m_InGameScene_GameEnd;
    public struct InGameSceneActions
    {
        private @InputActions m_Wrapper;
        public InGameSceneActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_InGameScene_Move;
        public InputAction @A => m_Wrapper.m_InGameScene_A;
        public InputAction @B => m_Wrapper.m_InGameScene_B;
        public InputAction @X => m_Wrapper.m_InGameScene_X;
        public InputAction @Y => m_Wrapper.m_InGameScene_Y;
        public InputAction @Pause => m_Wrapper.m_InGameScene_Pause;
        public InputAction @GameEnd => m_Wrapper.m_InGameScene_GameEnd;
        public InputActionMap Get() { return m_Wrapper.m_InGameScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameSceneActions set) { return set.Get(); }
        public void AddCallbacks(IInGameSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameSceneActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @GameEnd.started += instance.OnGameEnd;
            @GameEnd.performed += instance.OnGameEnd;
            @GameEnd.canceled += instance.OnGameEnd;
        }

        private void UnregisterCallbacks(IInGameSceneActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @GameEnd.started -= instance.OnGameEnd;
            @GameEnd.performed -= instance.OnGameEnd;
            @GameEnd.canceled -= instance.OnGameEnd;
        }

        public void RemoveCallbacks(IInGameSceneActions instance)
        {
            if (m_Wrapper.m_InGameSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameSceneActions @InGameScene => new InGameSceneActions(this);

    // OutGameScene
    private readonly InputActionMap m_OutGameScene;
    private List<IOutGameSceneActions> m_OutGameSceneActionsCallbackInterfaces = new List<IOutGameSceneActions>();
    private readonly InputAction m_OutGameScene_A;
    private readonly InputAction m_OutGameScene_B;
    private readonly InputAction m_OutGameScene_GameEnd;
    public struct OutGameSceneActions
    {
        private @InputActions m_Wrapper;
        public OutGameSceneActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_OutGameScene_A;
        public InputAction @B => m_Wrapper.m_OutGameScene_B;
        public InputAction @GameEnd => m_Wrapper.m_OutGameScene_GameEnd;
        public InputActionMap Get() { return m_Wrapper.m_OutGameScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OutGameSceneActions set) { return set.Get(); }
        public void AddCallbacks(IOutGameSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_OutGameSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OutGameSceneActionsCallbackInterfaces.Add(instance);
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @GameEnd.started += instance.OnGameEnd;
            @GameEnd.performed += instance.OnGameEnd;
            @GameEnd.canceled += instance.OnGameEnd;
        }

        private void UnregisterCallbacks(IOutGameSceneActions instance)
        {
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @GameEnd.started -= instance.OnGameEnd;
            @GameEnd.performed -= instance.OnGameEnd;
            @GameEnd.canceled -= instance.OnGameEnd;
        }

        public void RemoveCallbacks(IOutGameSceneActions instance)
        {
            if (m_Wrapper.m_OutGameSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOutGameSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_OutGameSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OutGameSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OutGameSceneActions @OutGameScene => new OutGameSceneActions(this);
    public interface IInGameSceneActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnGameEnd(InputAction.CallbackContext context);
    }
    public interface IOutGameSceneActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnGameEnd(InputAction.CallbackContext context);
    }
}
